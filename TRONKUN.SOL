pragma solidity ^0.4.23;

library SafeMath {

  /**0
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/**
 * @title SafeMath32
 * @dev SafeMath library implemented for uint32
 */
library SafeMath32 {

  function mul(uint32 a, uint32 b) internal pure returns (uint32) {
    if (a == 0) {
      return 0;
    }
    uint32 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint32 a, uint32 b) internal pure returns (uint32) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint32 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint32 a, uint32 b) internal pure returns (uint32) {
    assert(b <= a);
    return a - b;
  }

  function add(uint32 a, uint32 b) internal pure returns (uint32) {
    uint32 c = a + b;
    assert(c >= a);
    return c;
  }
}

/**
 * @title SafeMath16
 * @dev SafeMath library implemented for uint16
 */
library SafeMath16 {

  function mul(uint16 a, uint16 b) internal pure returns (uint16) {
    if (a == 0) {
      return 0;
    }
    uint16 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint16 a, uint16 b) internal pure returns (uint16) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint16 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint16 a, uint16 b) internal pure returns (uint16) {
    assert(b <= a);
    return a - b;
  }

  function add(uint16 a, uint16 b) internal pure returns (uint16) {
    uint16 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract TRONKUN {
  address public owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
 constructor() public {
    owner = msg.sender;
 }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
    
    using SafeMath for uint256;
    uint cooldownTime = 10 minutes;
    
    struct kun {
        uint price;
        uint atk;
        uint readyTime;
        uint quality;
    }
    
    kun[] public kuns;
    
    mapping (uint => address) public kunToOwner;
    mapping(uint => uint) public kunToSell;
    uint[] public kunNum = [0,0,0,0,0,0];
    
    function getKun() external {
        uint id = kuns.push(kun(0, 0, now, 0)) - 1;
        kunToOwner[id] = msg.sender;
    }
    
  function getKunsByOwner(address _owner) external view returns(uint[]) {
    uint[] memory result = new uint[](kuns.length);
    uint counter = 0;
    for (uint i = 0; i < kuns.length; i++) {
      if (kunToOwner[i] == _owner) {
        result[counter] = i;
        counter++;
      }
    }
    return result;
  }
  
  function getKunsNum() external view returns(uint) {
    return kuns.length;
  }
  
  //
  function getBattleKuns(uint _price) external view returns(uint[]) {
    uint[] memory result = new uint[](kuns.length);
    uint counter = 0;
    for (uint i = 0; i < kuns.length; i++) {
      if (kuns[i].price > _price && kunToOwner[i] != msg.sender && kunToSell[i] == 0) {
        result[counter] = i;
        counter++;
      }
    }
    return result;
  }
  
  uint randNonce = 0;
    //Evolution price
    uint public testFee = 1000000;
  
  event Evolution(address indexed owner, uint quality,uint newAtk, uint oldAtk);
  event FirstEvolution(address indexed owner, uint quality);
  event KunSell(address indexed owner, uint kunId,uint price);
  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
  
  function randMod() internal returns(uint) {
    randNonce = randNonce.add(1);
    return uint(keccak256(now, randNonce, blockhash(block.number - 1), block.coinbase)) % 100;
  }
  
  function setTestFee(uint _fee) external onlyOwner {
    testFee = _fee;
  }

  modifier onlyOwnerOf(uint _kunId) {
    require(msg.sender == kunToOwner[_kunId]);
    _;
  }
  
  function _triggerCooldown(kun storage _kun) internal {
    _kun.readyTime = uint(now + cooldownTime);
  }
  
  function evolve(uint _kunId) external onlyOwnerOf(_kunId) payable {
    require(msg.value == testFee * 50);
    kun storage mykun = kuns[_kunId];
    require(mykun.quality == 0);
    uint random = randMod();
    if (random < 1 && kunNum[0] < 50) {
        mykun.quality = 10;
        kunNum[0] = kunNum[0].add(1);
    } else if (random < 4 && kunNum[1] < 200) {
        mykun.quality = 9;
        kunNum[1] = kunNum[1].add(1);
    } else if (random < 10 && kunNum[2] < 400) {
        mykun.quality = 8;
        kunNum[2] = kunNum[2].add(1);
    } else if (random < 20 && kunNum[3] < 1000) {
        mykun.quality = 7;
        kunNum[3] = kunNum[3].add(1);
    } else if (random < 35 && kunNum[4] < 1500) {
        mykun.quality = 6;
        kunNum[4] = kunNum[4].add(1);
    } else if (random < 55 && kunNum[5] < 3000) {
        mykun.quality = 5;
        kunNum[5] = kunNum[5].add(1);
    } else if (random < 70) {
        mykun.quality = 4;
    } else if (random < 85) {
        mykun.quality = 3;
    } else if (random < 95) {
        mykun.quality = 2;
    } else {
        mykun.quality = 1;
    }
    owner.transfer(testFee * 10);
    mykun.price = mykun.price.add(testFee * 40);
    emit FirstEvolution(msg.sender, mykun.quality);
  }
  
  function feed10(uint _kunId) external onlyOwnerOf(_kunId) payable {
    require(msg.value == testFee * 10);
    kun storage mykun = kuns[_kunId];
    uint oldAtk = mykun.atk;
    uint random = randMod();
    if (random < 20) {
        mykun.atk = mykun.atk.add(200);
    } else if (random < 70) {
        mykun.atk = mykun.atk.add(300);
    } else if (random < 90) {
        mykun.atk = mykun.atk.add(800);
    } else {
         mykun.atk = mykun.atk.add(1500);
    }
    mykun.price = mykun.price.add(testFee * 8);
    owner.transfer(testFee * 2);
    emit Evolution(msg.sender, mykun.quality, mykun.atk, oldAtk);
  }
  
  function feed50(uint _kunId) external onlyOwnerOf(_kunId) payable {
    require(msg.value == testFee * 50);
    kun storage mykun = kuns[_kunId];
    uint oldAtk = mykun.atk;
    uint random = randMod();
    if (random < 20) {
        mykun.atk = mykun.atk.add(1000);
    } else if (random < 70) {
        mykun.atk = mykun.atk.add(1500);
    } else if (random < 90) {
        mykun.atk = mykun.atk.add(4000);
    } else {
         mykun.atk = mykun.atk.add(7500);
    }
    mykun.price = mykun.price.add(testFee * 40);
    owner.transfer(testFee * 10);
    emit Evolution(msg.sender, mykun.quality, mykun.atk, oldAtk);
  }
  
  function feed100(uint _kunId) external onlyOwnerOf(_kunId) payable {
    require(msg.value == testFee * 100);
    kun storage mykun = kuns[_kunId];
    uint oldAtk = mykun.atk;
    uint random = randMod();
    if (random < 20) {
        mykun.atk = mykun.atk.add(2200);
    } else if (random < 70) {
        mykun.atk = mykun.atk.add(3300);
    } else if (random < 90) {
        mykun.atk = mykun.atk.add(8800);
    } else {
         mykun.atk = mykun.atk.add(16500);
    }
    mykun.price = mykun.price.add(testFee * 80);
    owner.transfer(testFee * 20);
    emit Evolution(msg.sender, mykun.quality, mykun.atk, oldAtk);
  }
    
    //repoKun
    function repoKun(uint _kunId) external onlyOwnerOf(_kunId) {
        kun storage mykun = kuns[_kunId];
        msg.sender.transfer(mykun.price);
        emit KunSell( msg.sender, _kunId, mykun.price);
        mykun.price = 0;
        mykun.atk = 0;
        mykun.quality = 0;
        kunToOwner[_kunId] = 0;
    }
    
    event kunAttackResult(address indexed _from,uint quality1, address _to, uint quality2, bool result, uint price);

  function _isReady(kun storage _kun) internal view returns (bool) {
      return (_kun.readyTime <= now);
  }
  
  //attack
  function attack(uint _kunId, uint _targetId) external onlyOwnerOf(_kunId) {
    kun storage mykun = kuns[_kunId];
    kun storage enemykun = kuns[_targetId]; 
    require(_isReady(enemykun));
    require(enemykun.quality > 0 && kunToSell[_targetId] < 1);
    require(kunToSell[_kunId] < 1);
    uint rand = randMod();
    uint probability = (mykun.atk + mykun.quality*500) * 100 /(mykun.atk + enemykun.atk + mykun.quality*500 + enemykun.quality*500);
    
    if (rand < probability) {
        //win
        uint award2 = enemykun.price / 10;
        emit kunAttackResult(msg.sender, mykun.quality, kunToOwner[_targetId], enemykun.quality, true, award2);
        mykun.price =  mykun.price.add(award2);
        enemykun.price = enemykun.price.sub(award2);
        mykun.readyTime = now;
        _triggerCooldown(enemykun);
    } else {
        //loss
        uint award1 = mykun.price /10;
        emit kunAttackResult(msg.sender, mykun.quality, kunToOwner[_targetId], enemykun.quality, false, award1);
        enemykun.price =  enemykun.price.add(award1);
        mykun.price = mykun.price.sub(award1);
        mykun.readyTime = now;
    }
  }
  
  function getSellNum() external view returns(uint) {
    uint counter = 0;
    for (uint i = 0; i < kuns.length; i++) {
        if(kunToSell[i] > 0) {
            counter = counter.add(1);
        }
    }
    return counter;
  }
  
  function getSellKun() external view returns(uint[]) {
    uint[] memory result = new uint[](kuns.length);
    uint counter = 0;
    for (uint i = 0; i < kuns.length; i++) {
      if (kunToSell[i] > 0 && kunToOwner[i] != msg.sender) {
        result[counter] = i;
        counter++;
      }
    }
    return result; 
  }
  
  modifier selling(uint _kunId) {
    require(kunToSell[_kunId] > 0);
    _;
  }
  
  function _transfer(address _from, address _to, uint256 _tokenId) private {
    kunToOwner[_tokenId] = _to;
    emit Transfer(_from, _to, _tokenId);
  }
  
  function sellKun(uint _KunId,uint _price) external onlyOwnerOf(_KunId) {
    kunToSell[_KunId] = _price;
  }
  
  function buyKun(uint _id) external payable selling(_id) {
    require(msg.value == kunToSell[_id]);
    require(msg.sender != kunToOwner[_id]);
    uint fee = kunToSell[_id]*95/100;
    kunToOwner[_id].transfer(fee);
    owner.transfer(kunToSell[_id] - fee);
    _transfer(kunToOwner[_id], msg.sender, _id);
    kunToSell[_id] = 0;
  }
}
